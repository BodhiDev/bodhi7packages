class Efl.Ui.Table extends Efl.Ui.Widget implements Efl.Pack_Table, Efl.Pack_Layout,
                   Efl.Ui.Layout_Orientable, Efl.Gfx.Arrangement
{
   [[Widget container that arranges its elements in a grid.

     The amount of rows and columns can be controlled with @Efl.Pack_Table.table_rows
     and @Efl.Pack_Table.table_columns, and elements can be manually positioned with
     @Efl.Pack_Table.pack_table.
     Additionally, a fill direction can be defined with @Efl.Ui.Layout_Orientable.orientation and
     elements added with @Efl.Pack.pack. Elements are then added following this direction
     (horizontal or vertical) and when the amount of columns or rows has been reached,
     a step is taken in the orthogonal direction.
     In this second case there is no need to define both the amount of columns and rows,
     as the table will expand as needed.
     The default fill direction is @Efl.Ui.Layout_Orientation.horizontal.

     @since 1.23
   ]]
   methods {
      @property homogeneous {
         [[Control homogeneous mode.

           This will enable the homogeneous mode where cells are of the same
           weight and of the same min size which is determined by maximum min
           size of cells.]]
         values {
            homogeneoush : bool; [[$true if the box is homogeneous horizontally,
                                   $false otherwise]]
            homogeneousv : bool; [[$true if the box is homogeneous vertically,
                                   $false otherwise]]
         }
      }
   }
   implements {
      Efl.Object.constructor;
      Efl.Object.invalidate;
      Efl.Canvas.Group.group_calculate;
      Efl.Gfx.Entity.position { set; }
      Efl.Gfx.Entity.size { set; }
      Efl.Container.content_iterate;
      Efl.Container.content_count;
      Efl.Ui.Layout_Orientable.orientation { get; set; }
      Efl.Pack.pack_clear;
      Efl.Pack.unpack_all;
      Efl.Pack.unpack;
      Efl.Pack.pack;
      Efl.Gfx.Arrangement.content_padding { get; set; }
      Efl.Gfx.Arrangement.content_align { get; set; }
      Efl.Pack_Table.pack_table;
      Efl.Pack_Table.table_content_get;
      Efl.Pack_Table.table_contents_get;
      Efl.Pack_Table.table_cell_column { get; set; }
      Efl.Pack_Table.table_cell_row { get; set; }
      Efl.Pack_Table.table_size { get; set; }
      Efl.Pack_Table.table_columns { get; set; }
      Efl.Pack_Table.table_rows { get; set; }
      Efl.Pack_Layout.layout_update;
      Efl.Pack_Layout.layout_request;
      @empty Efl.Ui.L10n.l10n_text { get; set; }
      @empty Efl.Ui.I18n.language { get; set; }
   }
}
