mixin Efl.Canvas.Object_Animation requires Efl.Object
{
  [[A mixin that provides animation capabilities to @Efl.Canvas.Object.

    By including this mixin canvas objects can be animated just by calling @.animation_start.

    @since 1.24
  ]]
  methods {
    @property animation {
      [[The animation that is currently played on the canvas object.

        $null in case that there is no animation running.]]
      get {

      }
      values {
        animation : Efl.Canvas.Animation; [[The animation which is currently applied on this object.]]
      }
    }
    @property animation_progress {
      [[The current progress of the animation, between $[0.0] and $[1.0].

        Even if the animation is going backwards (speed < 0.0) the progress will still go from $[0.0] to $[1.0].

        If there is no animation going on, this will return $[-1.0].
      ]]
      get {

      }
      values {
        progress : double; [[Current progress of the animation.]]
      }
    }
    @property animation_pause {
      [[Pause the animation.

        @.animation will not be unset. When $pause is $false, the animation will be resumed at the same progress it
        was when it was paused.
      ]]
      values {
        pause : bool; [[Paused state.]]
      }
    }
    animation_start {
      [[Start a new animation.

        If there is an animation going on, it is stopped and the previous @.animation object is replaced.
        Its lifetime is adjusted accordingly.
      ]]
      params {
        animation : Efl.Canvas.Animation @move; [[The animation to start. When not needed anymore,
                                                  the reference that was passed is given up.]]
        speed : double; [[The speed of the playback. $[1.0] is normal playback. Negative values mean reverse playback.
                        ]]
        starting_progress : double; [[The progress point where to start. Must be between $[0.0] and $[1.0].
                                      Useful to revert an animation which has already started.
                                    ]]
      }
    }
    animation_stop {
      [[Stop the animation.

        After this call, @.animation will return $null.
        The reference that was taken during @.animation_start will be given up.
      ]]
    }
  }
  events {
      animation,changed: Efl.Canvas.Animation; [[The animation object got changed.]]
      animation_progress,updated : double; [[The animation progress got changed.]]
  }
}
