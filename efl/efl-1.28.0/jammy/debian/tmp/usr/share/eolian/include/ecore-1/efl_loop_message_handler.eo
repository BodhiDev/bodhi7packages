class @beta Efl.Loop_Message_Handler extends Efl.Object
{
   [[Message handlers represent a single message type on the Efl.Loop
     parent object. These message handlers can be used to listen for
     that message type by listening to the message event for the generic
     case or a class specific event type to get specific message object
     typing correct.]]
   methods {
      message_add {
         [[Creates a new message object of the correct type for this
           message type.]]
         return: Efl.Loop_Message; [[The new message payload object.]]
      }
      message_send {
         [[Place the message on the queue to be called later when
           message_process() is called on the loop object.]]
         params {
            @in message: Efl.Loop_Message; [[The message to place on the queue.]]
         }
      }
      message_call {
         [[Overide me (implement) then call super after calling the
           right callback type if you specialize the message type.]]
         params {
            @in message: Efl.Loop_Message; [[ Generic message event type ]]
         }
      }
      message_clear {
         [[Delete all queued messages belonging to this message handler
           that are pending on the queue so they are not processed
           later.]]
         return: bool; [[True if any messages of this type were cleared.]]
      }
   }
   events {
      message: Efl.Loop_Message; [[The message payload data]]
   }
   implements {
      Efl.Object.constructor;
      Efl.Object.destructor;
   }
}
